{"version":3,"file":"Parser.js","sources":["../../../../../node_modules/stylis/src/Parser.js"],"sourcesContent":["import {COMMENT, RULESET, DECLARATION} from './Enum.js'\nimport {abs, charat, trim, from, sizeof, strlen, substr, append, replace, indexof} from './Utility.js'\nimport {node, char, prev, next, peek, caret, alloc, dealloc, delimit, whitespace, escaping, identifier, commenter} from './Tokenizer.js'\n\n/**\n * @param {string} value\n * @return {object[]}\n */\nexport function compile (value) {\n\treturn dealloc(parse('', null, null, null, [''], value = alloc(value), 0, [0], value))\n}\n\n/**\n * @param {string} value\n * @param {object} root\n * @param {object?} parent\n * @param {string[]} rule\n * @param {string[]} rules\n * @param {string[]} rulesets\n * @param {number[]} pseudo\n * @param {number[]} points\n * @param {string[]} declarations\n * @return {object}\n */\nexport function parse (value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {\n\tvar index = 0\n\tvar offset = 0\n\tvar length = pseudo\n\tvar atrule = 0\n\tvar property = 0\n\tvar previous = 0\n\tvar variable = 1\n\tvar scanning = 1\n\tvar ampersand = 1\n\tvar character = 0\n\tvar type = ''\n\tvar props = rules\n\tvar children = rulesets\n\tvar reference = rule\n\tvar characters = type\n\n\twhile (scanning)\n\t\tswitch (previous = character, character = next()) {\n\t\t\t// (\n\t\t\tcase 40:\n\t\t\t\tif (previous != 108 && charat(characters, length - 1) == 58) {\n\t\t\t\t\tif (indexof(characters += replace(delimit(character), '&', '&\\f'), '&\\f') != -1)\n\t\t\t\t\t\tampersand = -1\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t// \" ' [\n\t\t\tcase 34: case 39: case 91:\n\t\t\t\tcharacters += delimit(character)\n\t\t\t\tbreak\n\t\t\t// \\t \\n \\r \\s\n\t\t\tcase 9: case 10: case 13: case 32:\n\t\t\t\tcharacters += whitespace(previous)\n\t\t\t\tbreak\n\t\t\t// \\\n\t\t\tcase 92:\n\t\t\t\tcharacters += escaping(caret() - 1, 7)\n\t\t\t\tcontinue\n\t\t\t// /\n\t\t\tcase 47:\n\t\t\t\tswitch (peek()) {\n\t\t\t\t\tcase 42: case 47:\n\t\t\t\t\t\tappend(comment(commenter(next(), caret()), root, parent), declarations)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tcharacters += '/'\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t// {\n\t\t\tcase 123 * variable:\n\t\t\t\tpoints[index++] = strlen(characters) * ampersand\n\t\t\t// } ; \\0\n\t\t\tcase 125 * variable: case 59: case 0:\n\t\t\t\tswitch (character) {\n\t\t\t\t\t// \\0 }\n\t\t\t\t\tcase 0: case 125: scanning = 0\n\t\t\t\t\t// ;\n\t\t\t\t\tcase 59 + offset: if (ampersand == -1) characters = replace(characters, /\\f/g, '')\n\t\t\t\t\t\tif (property > 0 && (strlen(characters) - length))\n\t\t\t\t\t\t\tappend(property > 32 ? declaration(characters + ';', rule, parent, length - 1) : declaration(replace(characters, ' ', '') + ';', rule, parent, length - 2), declarations)\n\t\t\t\t\t\tbreak\n\t\t\t\t\t// @ ;\n\t\t\t\t\tcase 59: characters += ';'\n\t\t\t\t\t// { rule/at-rule\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tappend(reference = ruleset(characters, root, parent, index, offset, rules, points, type, props = [], children = [], length), rulesets)\n\n\t\t\t\t\t\tif (character === 123)\n\t\t\t\t\t\t\tif (offset === 0)\n\t\t\t\t\t\t\t\tparse(characters, root, reference, reference, props, rulesets, length, points, children)\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tswitch (atrule === 99 && charat(characters, 3) === 110 ? 100 : atrule) {\n\t\t\t\t\t\t\t\t\t// d l m s\n\t\t\t\t\t\t\t\t\tcase 100: case 108: case 109: case 115:\n\t\t\t\t\t\t\t\t\t\tparse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length), children), rules, children, length, points, rule ? props : children)\n\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\tparse(characters, reference, reference, reference, [''], children, 0, points, children)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tindex = offset = property = 0, variable = ampersand = 1, type = characters = '', length = pseudo\n\t\t\t\tbreak\n\t\t\t// :\n\t\t\tcase 58:\n\t\t\t\tlength = 1 + strlen(characters), property = previous\n\t\t\tdefault:\n\t\t\t\tif (variable < 1)\n\t\t\t\t\tif (character == 123)\n\t\t\t\t\t\t--variable\n\t\t\t\t\telse if (character == 125 && variable++ == 0 && prev() == 125)\n\t\t\t\t\t\tcontinue\n\n\t\t\t\tswitch (characters += from(character), character * variable) {\n\t\t\t\t\t// &\n\t\t\t\t\tcase 38:\n\t\t\t\t\t\tampersand = offset > 0 ? 1 : (characters += '\\f', -1)\n\t\t\t\t\t\tbreak\n\t\t\t\t\t// ,\n\t\t\t\t\tcase 44:\n\t\t\t\t\t\tpoints[index++] = (strlen(characters) - 1) * ampersand, ampersand = 1\n\t\t\t\t\t\tbreak\n\t\t\t\t\t// @\n\t\t\t\t\tcase 64:\n\t\t\t\t\t\t// -\n\t\t\t\t\t\tif (peek() === 45)\n\t\t\t\t\t\t\tcharacters += delimit(next())\n\n\t\t\t\t\t\tatrule = peek(), offset = length = strlen(type = characters += identifier(caret())), character++\n\t\t\t\t\t\tbreak\n\t\t\t\t\t// -\n\t\t\t\t\tcase 45:\n\t\t\t\t\t\tif (previous === 45 && strlen(characters) == 2)\n\t\t\t\t\t\t\tvariable = 0\n\t\t\t\t}\n\t\t}\n\n\treturn rulesets\n}\n\n/**\n * @param {string} value\n * @param {object} root\n * @param {object?} parent\n * @param {number} index\n * @param {number} offset\n * @param {string[]} rules\n * @param {number[]} points\n * @param {string} type\n * @param {string[]} props\n * @param {string[]} children\n * @param {number} length\n * @return {object}\n */\nexport function ruleset (value, root, parent, index, offset, rules, points, type, props, children, length) {\n\tvar post = offset - 1\n\tvar rule = offset === 0 ? rules : ['']\n\tvar size = sizeof(rule)\n\n\tfor (var i = 0, j = 0, k = 0; i < index; ++i)\n\t\tfor (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x)\n\t\t\tif (z = trim(j > 0 ? rule[x] + ' ' + y : replace(y, /&\\f/g, rule[x])))\n\t\t\t\tprops[k++] = z\n\n\treturn node(value, root, parent, offset === 0 ? RULESET : type, props, children, length)\n}\n\n/**\n * @param {number} value\n * @param {object} root\n * @param {object?} parent\n * @return {object}\n */\nexport function comment (value, root, parent) {\n\treturn node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0)\n}\n\n/**\n * @param {string} value\n * @param {object} root\n * @param {object?} parent\n * @param {number} length\n * @return {object}\n */\nexport function declaration (value, root, parent, length) {\n\treturn node(value, root, parent, DECLARATION, substr(value, 0, length), substr(value, length + 1, -1), length)\n}\n"],"names":["compile","value","dealloc","parse","alloc","root","parent","rule","rules","rulesets","pseudo","points","declarations","index","offset","length","atrule","property","previous","variable","scanning","ampersand","character","type","props","children","reference","characters","next","charat","indexof","replace","delimit","whitespace","escaping","caret","peek","append","comment","commenter","strlen","declaration","ruleset","prev","from","identifier","post","size","sizeof","i","j","k","x","y","substr","abs","z","trim","node","RULESET","COMMENT","char","DECLARATION"],"mappings":"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"}